@Library('salt@master') _

// Global Pipeline Definitions
def test_distributions = [
    'centos6-py2': ['name': 'centos', 'version': '6', 'py_version': '2', 'display_name': 'CentOS 6', 'transport': 'ZeroMQ'],
    'centos7-py2': ['name': 'centos', 'version': '7', 'py_version': '2', 'display_name': 'CentOS 7', 'transport': 'ZeroMQ'],
    'centos7-py3': ['name': 'centos', 'version': '7', 'py_version': '3', 'display_name': 'CentOS 7', 'transport': 'ZeroMQ'],
    'centos7-py2-tcp': ['name': 'centos', 'version': '7', 'py_version': '2', 'display_name': 'CentOS 7', 'transport': 'TCP'],
    'centos7-py3-tcp': ['name': 'centos', 'version': '7', 'py_version': '3', 'display_name': 'CentOS 7', 'transport': 'TCP'],
    'debian8-py2': ['name': 'debian', 'version': '8', 'py_version': '2', 'display_name': 'Debian 8', 'transport': 'ZeroMQ'],
    'debian8-py3': ['name': 'debian', 'version': '8', 'py_version': '3', 'display_name': 'Debian 8', 'transport': 'ZeroMQ'],
    'debian9-py2': ['name': 'debian', 'version': '9', 'py_version': '2', 'display_name': 'Debian 9', 'transport': 'ZeroMQ'],
    'debian9-py3': ['name': 'debian', 'version': '9', 'py_version': '3', 'display_name': 'Debian 9', 'transport': 'ZeroMQ'],
    'fedora29-py2': ['name': 'fedora', 'version': '29', 'py_version': '2', 'display_name': 'Fedora 29', 'transport': 'ZeroMQ'],
    'fedora29-py3': ['name': 'fedora', 'version': '29', 'py_version': '3', 'display_name': 'Fedora 29', 'transport': 'ZeroMQ'],
    'ubuntu1604-py2': ['name': 'ubuntu', 'version': '1604', 'py_version': '2', 'display_name': 'Ubuntu 16.04', 'transport': 'ZeroMQ'],
    'ubuntu1604-py3': ['name': 'ubuntu', 'version': '1604', 'py_version': '3', 'display_name': 'Ubuntu 16.04', 'transport': 'ZeroMQ'],
    'ubuntu1604-py2': ['name': 'ubuntu', 'version': '1604', 'py_version': '2', 'display_name': 'Ubuntu 16.04', 'transport': 'TCP'],
    'ubuntu1604-py3': ['name': 'ubuntu', 'version': '1604', 'py_version': '3', 'display_name': 'Ubuntu 16.04', 'transport': 'TCP'],
    'ubuntu1804-py2': ['name': 'ubuntu', 'version': '1804', 'py_version': '2', 'display_name': 'Ubuntu 18.04', 'transport': 'ZeroMQ'],
    'ubuntu1804-py3': ['name': 'ubuntu', 'version': '1804', 'py_version': '3', 'display_name': 'Ubuntu 18.04', 'transport': 'ZeroMQ'],
    'windows2016-py2': ['name': 'windows', 'version': '2016', 'py_version': '2', 'display_name': 'Windows 2016', 'transport': 'ZeroMQ'],
    'windows2016-py3': ['name': 'windows', 'version': '2016', 'py_version': '3', 'display_name': 'Windows 2016', 'transport': 'ZeroMQ'],
]


def parameters_listing = [
    booleanParam(defaultValue: true, description: 'Run full test suite', name: 'runFull')
]
test_distributions.each { slug, details ->
    parameters_listing.add(
        booleanParam(defaultValue: true, description: "Run ${details['display_name']} tests under Py${details['py_version']}", name: slug)
    )
}

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
    parameters(parameters_listing)
])

cancelPreviousBuilds(2)

// Which slack channel to send notifications to
def slack_channel = '#jenkins-prod-pr'

// Select a random GH account for notifications
def random = new Random()
def gh_commit_status_accounts = ['svc-builderopen-gh', 'svc-builderopen2-gh', 'svc-builderopen3-gh', 'salt-jenkins-gh']
def gh_commit_status_account = gh_commit_status_accounts.get(random.nextInt(gh_commit_status_accounts.size()))
def gh_commit_status_context = "ci"

def display_name = "${env.BRANCH_NAME}"

withSetBuildResult(slack_channel) {
    withSetGithubCommitContext(display_name, gh_commit_status_context, gh_commit_status_account) {
        stage('Run Lint') {
            def job_name = "pr-lint/${env.BRANCH_NAME}"
            println "Triggering build on ${job_name}"
            build job: job_name, wait: true, propagate: true
        }
        stage('Run Docs & Tests') {
            builds = [:]
            builds['docs'] = {
                def job_name = "pr-doc/${env.BRANCH_NAME}"
                println "Triggering build on ${job_name}"
                build job: job_name, wait: true, propagate: true
            }
            test_distributions.each { slug, details ->
                if (params[slug]) {
                    builds[slug] = {
                        def job_name = "pr-kitchen-${details['name']}${details['version']}-py${details['py_version']}/${env.BRANCH_NAME}"
                        println "Triggering build on ${job_name}"
                        build job: job_name, wait: true, propagate: true
                    }
                }
            }
            parallel builds
        }
    }
}
// vim: ft=groovy ts=4 sts=4 et
