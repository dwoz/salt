@Library('salt@1.0') _

// Define the maximum time, in hours, that a test run should run for
def global_timeout = 2
def salt_target_branch = 'neon'

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
])


def userTriggered = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def upstreamTrigger = currentBuild.getBuildCauses('hudson.model.Cause$UpstreamCause')

// Which slack channel to send notifications to
def slack_channel = '#jenkins-prod-pr'

// Select a random GH account for notifications
def random = new Random()
def gh_commit_status_accounts = ['svc-builderopen-gh', 'svc-builderopen2-gh', 'svc-builderopen3-gh', 'salt-jenkins-gh']
def gh_commit_status_account = gh_commit_status_accounts.get(random.nextInt(gh_commit_status_accounts.size()))
def gh_commit_status_context = "ci/docs"

def display_name = "Docs"

if (userTriggered || upstreamTrigger) {
    wrappedNode('docs', gh_commit_status_context, gh_commit_status_account, display_name, global_timeout, slack_channel) {

        // Be sure to cancel any previously running builds
        cancelPreviousBuilds()

        def shell_header = ''

        withEnv(["SALT_TARGET_BRANCH=${salt_target_branch}"]) {
            // Checkout the repo
            stage('checkout-scm') {
                cleanWs notFailBuild: true
                checkout scm
                sh 'git fetch --no-tags https://github.com/saltstack/salt.git +refs/heads/${SALT_TARGET_BRANCH}:refs/remotes/origin/${SALT_TARGET_BRANCH}'
            }
        }

        // Setup the kitchen required bundle
        stage('Setup') {
            sh shell_header + '''
            eval "$(pyenv init -)"
            pyenv --version
            pyenv install --skip-existing 3.6.8
            pyenv shell 3.6.8
            python --version
            pip install -U nox-py2
            nox --version
            '''
        }

        stage('Build') {
            sh shell_header + '''
            eval "$(pyenv init -)"
            pyenv shell 3.6.8
            nox -e docs
            '''
            archiveArtifacts artifacts: 'doc/doc-archive.tar.gz'
        }
    }
} else {
    currentBuild.result = 'ABORTED'
    error('The build was not triggered by an upstream job or a user. Aborting.')
}

// vim: ft=groovy
