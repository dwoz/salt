@Library('salt@1.0') _

// Define the maximum time, in hours, that a serial test run should run for
def serial_testrun_timeout = 6
// Define the maximum time, in hours, that a parallel test run should run for
def parallel_testrun_timeout = 2

// Now define a global pipeline timeout. This is is the sum of the serial and parallel test
// runs with one(1) additional hour to allow for artifacts to be downloaded, if possible.
def global_timeout = serial_testrun_timeout + parallel_testrun_timeout + 1;

def distro_name = 'ubuntu'
def distro_version = '1604'
def python_version = 'py3'
def test_transport = 'TCP'
def distro_display_name = "${distro_name.capitalize()} ${distro_version} ${python_version.capitalize()}(${test_transport})"
def salt_target_branch = 'neon'
def golden_images_branch = 'neon'

def random = new Random()
def gh_commit_status_accounts = ['svc-builderopen-gh', 'svc-builderopen2-gh', 'svc-builderopen3-gh', 'salt-jenkins-gh']
def gh_commit_status_account = gh_commit_status_accounts.get(random.nextInt(gh_commit_status_accounts.size()))
def gh_commit_status_context = "ci/${python_version}/${distro_name}-${distro_version}"

echo "Using GH Account: ${gh_commit_status_account}"

def checkout_directory = 'salt-checkout'

// Test Chunks Definitions
def integration_modules_chunks = 2
def integration_states_chunks = 2
def unit_chunks = 2
def other_chunks = 4

// Which node do we run this pipeline
def node_name = 'kitchen-xl-slave'

// Which slack channel to send notifications to
def slack_channel = '#jenkins-prod-pr'

// Distro Specific Nox Passthrough Options
def nox_passthrough_opts = '--ssh-tests'

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
    parameters([
        booleanParam(defaultValue: true, description: 'Run full test suite', name: 'runFull')
    ])
])


def userTriggered = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def upstreamTrigger = currentBuild.getBuildCauses('hudson.model.Cause$UpstreamCause')

if (userTriggered || upstreamTrigger) {

    // Be sure to cancel any previously running builds
    cancelPreviousBuilds()

    withEnv(['SALT_KITCHEN_PLATFORMS=/var/jenkins/workspace/nox-platforms.yml',
             'SALT_KITCHEN_VERIFIER=/var/jenkins/workspace/nox-verifier.yml',
             'SALT_KITCHEN_DRIVER=/var/jenkins/workspace/driver.yml',
             "NOX_ENV_NAME=pytest-${test_transport.toLowerCase()}",
             'NOX_ENABLE_FROM_FILENAMES=true',
             "SALT_TARGET_BRANCH=${salt_target_branch}",
             "GOLDEN_IMAGES_CI_BRANCH=${golden_images_branch}",
             "CODECOV_FLAGS=${distro_name}${distro_version},${python_version},${test_transport.toLowerCase()}",
             'PATH=~/.rbenv/shims:/usr/local/rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin',
             'RBENV_VERSION=2.4.2',
             "TEST_SUITE=${python_version}",
             "TEST_PLATFORM=${distro_name}-${distro_version}",
             "TEST_TRANSPORT=${test_transport}",
             "FORCE_FULL=${params.runFull}"]) {

        runTestSuite(
            node_name,
            distro_display_name,
            checkout_directory,
            nox_passthrough_opts,
            integration_modules_chunks,
            integration_states_chunks,
            unit_chunks,
            other_chunks,
            gh_commit_status_context,
            gh_commit_status_account,
            parallel_testrun_timeout,
            serial_testrun_timeout,
            global_timeout,
            slack_channel
        )

    }

} else {
    currentBuild.result = 'ABORTED'
    error('The build was not triggered by an upstream job or a user. Aborting.')
}

// vim: ft=groovy
