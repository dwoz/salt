import groovy.transform.Field

// Define the maximum time, in hours, that a serial test run should run for
def serial_testrun_timeout = 6
// Define the maximum time, in hours, that a parallel test run should run for
def parallel_testrun_timeout = 2

// Now define a global pipeline timeout. This is is the sum of the serial and parallel test
// runs with one(1) additional hour to allow for artifacts to be downloaded, if possible.
def global_timeout = serial_testrun_timeout + parallel_testrun_timeout + 1;

def distro_name = 'centos'
def distro_version = '6'
def python_version = 'py2'
def test_transport = 'ZeroMQ'
def distro_display_name = "${distro_name.capitalize()} ${distro_version} ${python_version.capitalize()}(${test_transport})"
def salt_target_branch = 'neon'
def golden_images_branch = 'neon'

def gh_commit_status_account = 'svc-builderopen-gh'
def gh_commit_status_context = "ci/${python_version}/${distro_name}-${distro_version}"

@Field
def checkout_directory = 'salt-checkout'

// Test Chunks Definitions
@Field
def integration_modules_chunks = 2
@Field
def integration_states_chunks = 2
@Field
def unit_chunks = 2
@Field
def other_chunks = 4

// Distro Specific Nox Passthrough Options
@Field
def nox_passthrough_opts = '--ssh-tests'

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
    parameters([
        booleanParam(defaultValue: true, description: 'Run full test suite', name: 'runFull')
    ])
])

// Be sure to cancel any previously running builds
def buildNumber = env.BUILD_NUMBER as int
if (buildNumber > 1) {
    // This will cancel the previous build which also defined a matching milestone
    milestone(buildNumber - 1)
}
// Define a milestone for this build so that, if another build starts, this one will be aborted
milestone(buildNumber)


node('kitchen-xl-slave') {
    ansiColor('xterm') {
        withEnv(["SALT_TARGET_BRANCH=${salt_target_branch}"]) {
            dir(checkout_directory) {
                // Checkout the repo
                stage('checkout-scm') {
                    cleanWs notFailBuild: true
                    checkout scm
                    sh 'git fetch --no-tags https://github.com/saltstack/salt.git +refs/heads/${SALT_TARGET_BRANCH}:refs/remotes/origin/${SALT_TARGET_BRANCH}'
                }
            }
            def pipeline = load "${checkout_directory}/.ci/build-pipeline.groovy"
            pipeline.run_pipeline()
        }
    }
}

// vim: ft=groovy
